// Code generated by erb. DO NOT EDIT.

package decimal_test

import (
	"context"
	"testing"

	"github.com/jackc/pgtype/testutil"
	"github.com/jackc/pgx/v4"
	"github.com/shopspring/decimal"
	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
)

<%
  [
    ["numeric", ["int64", "float64", "pgtype.Numeric", "decimal.Decimal", "decimal.NullDecimal", "pgxdecimal.Decimal", "pgxdecimal.NullDecimal"], [[1, 1], [1, 10], [10, 1], [100, 10]]],
  ].each do |pg_type, go_types, rows_columns|
%>
<% go_types.each do |go_type| %>
<% rows_columns.each do |rows, columns| %>
func BenchmarkQueryDecode_PG_<%= pg_type %>_to_Go_<%= go_type.gsub(/\W/, "_") %>_<%= rows %>_rows_<%= columns %>_columns(b *testing.B) {
	conn := testutil.MustConnectPgx(b)
	defer testutil.MustCloseContext(b, conn)

	b.ResetTimer()
	var v [<%= columns %>]<%= go_type %>
	for i := 0; i < b.N; i++ {
		_, err := conn.QueryFunc(
			context.Background(),
			`select <% columns.times do |col_idx| %><% if col_idx != 0 %>, <% end %>n::<%= pg_type %> + <%= col_idx%><% end %> from generate_series(1, <%= rows %>) n`,
			nil,
			[]interface{}{<% columns.times do |col_idx| %><% if col_idx != 0 %>, <% end %>&v[<%= col_idx%>]<% end %>},
			func(pgx.QueryFuncRow) error { return nil },
		)
		if err != nil {
			b.Fatal(err)
		}
	}
}
<% end %>
<% end %>
<% end %>

<%
  [
    ["numeric", ["decimal.Decimal", "decimal.NullDecimal"], [[1, 1], [1, 10], [10, 1], [100, 10]]],
  ].each do |pg_type, go_types, rows_columns|
%>
<% go_types.each do |go_type| %>
<% rows_columns.each do |rows, columns| %>
func BenchmarkQueryDecode_PG_<%= pg_type %>_to_Go_<%= go_type.gsub(/\W/, "_") %>_<%= rows %>_rows_<%= columns %>_columns_with_NumericDecoderWrapper(b *testing.B) {
	conn := testutil.MustConnectPgx(b)
	defer testutil.MustCloseContext(b, conn)

  pgxdecimal.Register(conn.ConnInfo())

	b.ResetTimer()
	var v [<%= columns %>]<%= go_type %>
	for i := 0; i < b.N; i++ {
		_, err := conn.QueryFunc(
			context.Background(),
			`select <% columns.times do |col_idx| %><% if col_idx != 0 %>, <% end %>n::<%= pg_type %> + <%= col_idx%><% end %> from generate_series(1, <%= rows %>) n`,
			nil,
			[]interface{}{<% columns.times do |col_idx| %><% if col_idx != 0 %>, <% end %>&v[<%= col_idx%>]<% end %>},
			func(pgx.QueryFuncRow) error { return nil },
		)
		if err != nil {
			b.Fatal(err)
		}
	}
}
<% end %>
<% end %>
<% end %>
